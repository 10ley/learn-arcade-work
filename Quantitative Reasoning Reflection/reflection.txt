Quantitative Reasoning Reflection
Tenley Schroeder
12/1/21

Question 1

    There are different methods and techniques to programming. I use if statements
all the time. I use if statements for conditions and Boolean variables. An example
of this is true and false. By knowing if someone this true or false you can trigger
different code. Loops are also very useful. I use loops, so I don't need to repeat
my code. An example of this is for one of my games. I created multiple sprites though
a loop.
    Games are built off of classes. They allow you to give attributes and mechanics
to an object. As well as create code all within one class. You can create
multiple objects within a class. It allows you to put multiple functions together.
Functions allow you to make a set of code you can call upon multiple times. It makes
the code much easier to read. It allows me to chunk my code out into more readable
lines of codes.
    Lists, are amazing. I use them all the time. Lists allow you to create multiples.
Lists allow you to keep a running total of different numbers. They are very helpful
in games because of the ability of lists. The Camel lab, is a great example of
how useful lists are.
    Quantitative methods make up almost all the logic of programming.

Question 2

    One of the biggest ways that I communicate with other coders, who are reading my code
is by using comments. By commenting you can quickly explain what the chunk of code
does. Another way to help others read my code better is by naming the
variables, functions and classes, as what they are. This is a quick way
to help others understand different sections of code. Like not using the variable
x, but instead temp. It makes the code much easier to read and follow.
Chunking is also extremely helpful, by chunking you are able to follow the code
section for section.

Question 3

    You test and evaluate the accuracy of your code in many ways. One way is just to
just run the code and see if it works. Another way, is to look at the crash messages,
"Why did the game crash? What line is the error in?"
Another way is by looking at the little errors in the corner and following them to the
problem. Such as an error of a certain variable being spelt wrong. Something that
small can mess up all of your code. I debug my codes by looking at where it went wrong
and working from there.

Question 4

    There are many limitations to using numerical methods to make decisions. Numbers
can't fully think and contempt decisions. They can make their best guess, but it
will not be fair, as well as everything would be the same. We can't just evaluate
students on just test scores, because we need to look at how they have progressed
throughout the semester. We cannot evaluate teachers on how their students do, because
each student is different, we can look at the progress not just the numbers.
By evaluating athletes on their stats alone we can not determine if they would
be a good fit for the team.


